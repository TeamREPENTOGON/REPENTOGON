"a3????????8b45??a3(????????)8a45":
reference BeamRenderer *g_BeamRenderer;

"558bec8b45??a3":
static void BeamRenderer::Begin(ANM2 *anm2, unsigned int layer, bool useOverlay, bool unk);

"558bec83e4f883ec588b45":
static void BeamRenderer::Add(Vector *point, ColorMod * color, float spritesheetCoordinate<xmm2>, float width<xmm3>);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ecb0010000a1????????33c58945??5657508d45??64a3????????8b3d":
static void BeamRenderer::End();

// we don't actually use Point here, just a deque, but for some reason
// the deque insists that Point must be defined before BeamRenderer
struct BeamRenderer depends (ANM2, PointDeque) {
	{{
		BeamRenderer(ANM2& anm2, unsigned int layer, bool useOverlayData, bool unkBool) : _anm2(anm2), _layer(layer), _useOverlayData(useOverlayData), _unkBool(unkBool) {}
	
		inline ANM2* GetANM2() { return &this->_anm2; }
		inline unsigned int* GetLayer() { return &this->_layer; }
		inline bool* GetUseOverlay() { return &this->_useOverlayData; }
		inline bool* GetUnkBool() { return &this->_unkBool; } 
	}}
	ANM2& _anm2 : 0x0;
	unsigned int _layer : 0x4;
	bool _useOverlayData : 0x8;
	bool _unkBool : 0x9;
	PointDeque _points : 0xc;
} : 0x20;