"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ece8000000a1????????33c58945??5657508d45??64a3????????8bf9c787????????8096184b":
__thiscall void HUD::Render();

"558bec5153568bf15780be????????0074":
__thiscall void HUD::Update();

"558bec83e4f85153568bd9":
__thiscall void HUD::PostUpdate();

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ec98000000a1????????33c58945??5657508d45??64a3????????8bf1":
__thiscall void HUD::LoadGraphics();

"558bec8b55??33c0391174??4081c1e006000083f80872??5dc20400":
__thiscall void HUD::FlashRedHearts(Entity_Player *player);

// Will use possibly-inlined code to show mini text on the player's hud in co-op (as of Rep+ v1.9.7.10), otherwise calls ShowStackedItemTextCustomUTF16.
"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ecb0000000a1????????33c58945??5657508d45??64a3????????898d":
__thiscall void HUD::ShowItemText(Entity_Player* player, ItemConfig_Item* item);

// Will call HUD_Message::Show to show mini text on the player's hud in co-op, otherwise calls ShowStackedItemTextCustomUTF8.
"558bec51568b35????????578bf98d8e":
__thiscall void HUD::ShowItemTextCustomUTF8(Entity_Player* player, char* title, char* subtitle);

// Shows on the "stacked" messages only. The booleans are currently unused and ignored (as of Rep+ v1.9.7.10).
"558bec5153565733c08d91????????90803a0074??4081c2f401000083f80672??5f5e5b595dc210008b75":
__thiscall void HUD::ShowStackedItemTextCustomUTF16(wchar_t* title, wchar_t* subtitle, bool unused1, bool unused2);

// Shows on the "stacked" messages only. The first boolean is currently unused and ignored (as of Rep+ v1.9.7.10).
"558bec5153565733c08d91????????90803a0074??4081c2f401000083f80672??5f5e5b595dc2100069c0f4010000":
__thiscall void HUD::ShowStackedItemTextCustomUTF8(char* title, char* subtitle, bool unused, bool isCurseDisplay);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec405657a1????????33c5508d45??64a3????????8bf9897d":
__thiscall void HUD::ShowFortuneText(int * * param_1);

"558bec8b55??85d274??33c0":
__thiscall void HUD::InvalidateCraftingItem(Entity_Player * player);

// 0 = Normal
// 1 = Jacob & Esau
// 2 = Compact (Used for co-op players, and for P1 if there are >2 players)
// 3 = J&E Compact (Used for J&E if they are not P1 or if there are >3 players)
"558bec53568b35????????8bd1":
__thiscall int HUD::GetPlayerHUDLayout(int playerHudIndex, Entity_Player* player);



struct HUD depends (PlayerHUD, ANM2, StatHUD, HUD_Message) { {{
	inline PlayerHUD* GetPlayerHUD(int index) {
		if (index < 0 || index > 7) {
			return nullptr;
		}
		return &this->_playerHUD[index];
	}
}} 
    PlayerHUD _playerHUD[8] : 0x0;
    ANM2 _chargeBarSprite : 0x3798;
    ANM2 _heartsSprite : 0x39c0;
    ANM2 _pickupHUDSprite : 0x3ad4;
    ANM2 _cardsPillsSprite : 0x3be8;
	HUD_Message _messageMain : 0x3cfc;  // Used for stage/curse text, at least
	HUD_Message _messageStack[6] : 0x3ef0;  // Used for item text / pills / etc
	HUD_Message _messagePlayerHUD[4] : 0x4aa8;  // Mini item text streaks displayed near player huds in co-op
    ANM2 _fortuneSprite : 0x5278;
	ANM2 _statsSprite : 0x5394;
	float _bossHPBarFill : 0x54b0;
	bool _isVisible : 0x54e4;
	int _hudRefreshType : 0x54e8;
	int _hudRefreshCountdown : 0x54f0;
	ANM2 _coopMenuSprite : 0x54f4;
	ANM2 _inventorySprite : 0x5608;
	ANM2 _craftingTableSprite : 0x571c;
	ANM2 _poopSpellsSprite : 0x5830;
	StatHUD _statHUD : 0x59b4;
} : 0x5c90;
