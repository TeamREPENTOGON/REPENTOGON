"538bdc83ec0883e4f083c404558b6b??896c24??8bec6aff68????????64a1????????505383ec28":
__thiscall void MenuManager::constructor();

"c745fcffffffff8bc8a3(????????)e8????????":
reference MenuManager *g_MenuManager;

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381eca8000000a1????????33c58945??5657508d45??64a3????????8b3d":
__thiscall void MenuManager::Init();

"558bec83e4f881ece0000000a1????????56":
__thiscall void MenuManager::Render();

"538bdc83ec0883e4f883c404558b6b??896c24??8bec83ec1856578b3d":
__thiscall void MenuManager::Update();

"558bec83ec68a1????????33c58945??56578bf9807f??00":
__thiscall void MenuManager::RenderButtonLayout();

"558bec83ec08538b1d????????568b75":
__thiscall void MenuManager::SetState(int estate);

struct MenuManager depends (KAGE_Graphics_Color, ColorModState, ANM2, Seeds, Vector, Menu_Game, Menu_Character, Menu_Title, Menu_Save, Menu_Challenge, Menu_DailyChallenge, Menu_Collection, Menu_Bestiary, Menu_Stats, Menu_Options, Menu_SpecialSeeds, Menu_ControllerSelect, Menu_KeyConfig, Menu_Cutscenes, Menu_CustomChallenge, Menu_Mods, GenericPopup, GenericPrompt) {
{{
	MenuManager()
	{
		this->constructor();
	}
	
	inline Menu_Game* GetMenuGame() {return &this->_menuGame; }
	inline Menu_Character* GetMenuCharacter() {return &this->_menuCharacter; }

	inline Menu_Title* GetMenuTitle() {return &this->_menuTitle; }
	inline Menu_Save* GetMenuSave() {return &this->_menuSave; }
	inline Menu_Challenge* GetMenuChallenge() {return &this->_menuChallenge; }
	inline Menu_DailyChallenge* GetMenuDailyChallenge() {return &this->_menuDailyChallenge; }
	inline Menu_Collection* GetMenuCollection() {return &this->_menuCollection; }
	inline Menu_Bestiary* GetMenuBestiary() {return &this->_menuBestiary; }
	inline Menu_Stats* GetMenuStats() {return &this->_menuStats; }
	inline Menu_Options* GetMenuOptions() {return &this->_menuOptions; }
	inline Menu_SpecialSeeds* GetMenuSpecialSeeds() {return &this->_menuSpecialSeeds; }
	inline Menu_ControllerSelect* GetMenuControllerSelect() {return &this->_menuControllerSelect; }
	inline Menu_KeyConfig* GetMenuKeyConfig() {return &this->_menuKeyConfig; }
	inline Menu_Cutscenes* GetMenuCutscenes() {return &this->_menuCutscenes; }
	inline Menu_CustomChallenge* GetMenuCustomChallenge() {return &this->_menuCustomChallenge; }
	inline Menu_Mods* GetMenuMods() {return &this->_menuMods; }
	inline ColorModState* GetCurrentColorModifier() { return &this->_currentColorModState; }
	inline ColorModState* GetTargetColorModifier() { return &this->_targetColorModState; }
	inline ColorModState* GetLerpColorModifier() { return &this->_lerpColorModState; }
}} 
    int _state : 0x0;
    float _fadeOutProgress : 0x4;
    int _fadeInActive : 0x8;
    float _fadeInProgress : 0xc;
    KAGE_Graphics_Color _fadeInColor : 0x10;
    int _returnState : 0x20; /* ??? 256 when opening main menu from a run */
    int _unrecognizedControllerPopupVisible : 0x24; // ???
    float _vingnetteIntensity : 0x28;
    float _backWidgetPositionOffsetY : 0x2c;
    float _selectWidgetPositionOffsetY : 0x30;
    int _controllerIndex : 0x34; /* controller currently controlling the menu navigation */
    int _selectedMenuID : 0x38;
    Vector _ViewPosition : 0x3c;
    ANM2 _MenuShadowSprite : 0x44;
    ANM2 _BackWidgetSprite : 0x158;
    ANM2 _SelectWidgetSprite : 0x26c;
    GenericPopup GenericPopup_unrecognizedControllerPopup: 0x380;
    char ImageBase_EmptyScreenImage[8] : 0x4a0;
    char ImageBase_MenuOverlayImage[8] : 0x4a8;
    char ImageBase_UNUSED4b0[8] : 0x4b0;
    Seeds _seedsObject : 0x4b8;
    Menu_Title _menuTitle : 0x514;
    Menu_Save _menuSave : 0x634;
    char _UNUSED80ee0[192] : 0x80eec;
    Menu_Game _menuGame : 0x80fac;
    Menu_DailyChallenge _menuDailyChallenge : 0x8130c;
    Menu_Character _menuCharacter : 0x101c00;
    Menu_SpecialSeeds _menuSpecialSeeds : 0x102bec;
    Menu_Challenge _menuChallenge : 0x102d50;
    Menu_Collection _menuCollection : 0x102e80;
    Menu_Stats _menuStats : 0x1030e0;
    Menu_Options _menuOptions : 0x10d4a4;
    Menu_ControllerSelect _menuControllerSelect : 0x10d710;
    Menu_KeyConfig _menuKeyConfig : 0x10d840;
    Menu_Cutscenes _menuCutscenes : 0x10d968;
    Menu_Bestiary _menuBestiary : 0x10da8c;
    Menu_CustomChallenge _menuCustomChallenge : 0x10de04;
    Menu_Mods _menuMods : 0x10df28;
	bool _shouldLerpColorModState : 0x10e0dc; // 0x10e0dc
	ColorModState _currentColorModState : 0x10e0e0; // 0x10e0e0
	ColorModState _targetColorModState : 0x10e0f8; // 0x10e0f8
	ColorModState _lerpColorModState : 0x10e110; // 0x10e110
	ANM2 _flySprite : 0x10e138; //0x10e138
	float _scrollinterpolationX : 0x10e128;
	float _scrollinterpolationY : 0x10e12c;
} : 0x10e24c;
