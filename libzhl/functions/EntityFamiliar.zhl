"558bec6aff68????????64a1????????5083ec3c535657a1????????33c5508d45??64a3????????8bf98b87":
__thiscall void Entity_Familiar::AddToFollowers();

"558bec6aff68????????64a1????????5083ec34535657a1????????33c5508d45??64a3????????8bd98b83":
__thiscall void Entity_Familiar::AddToDelayed();

"558bec6aff68????????64a1????????505156a1????????33c5508d45??64a3????????8bf18975??e8????????c745??000000008d86":
__thiscall void Entity_Familiar::Constructor();

"8b41??483dea000000":
__thiscall int Entity_Familiar::GetFollowerPriority();

// GetMultiplier returns a float in XMM0/ST0 (or whatever), but ZHL doesn't support that yet.
// For now, just allow calling the function to trigger evaluation for my ASM patch at the end of the function, which caches the result.
"558bec83e4f883ec0853568bf18b86":
__thiscall void Entity_Familiar::GetMultiplier();

"558bec83e4c083ec745356578bf9e8":
__thiscall void Entity_Familiar::Render(Vector *offset);

"558bec83e4f081ec48010000a1":
__thiscall bool Entity_Familiar::HandleCollision(Entity* collider, bool low);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec305657a1????????33c5508d45??64a3????????8bf1":
__thiscall void Entity_Familiar::Shoot();

"558bec83e4f883ec10568bf157817e??f0000000":
__thiscall bool Entity_Familiar::TryAimAtMarkedTarget(Vector *AimDirection, int eDirection, Vector *Unk);

"558bec83e4f883ec245356578bf980bf????????00":
__thiscall void Entity_Familiar::TriggerRoomClear();

// jeez
"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ec88000000a1????????33c58945??5657508d45??64a3????????8bf18975??33c08945??8b0d":
__thiscall void Entity_Familiar::UpdateDirtColor(bool Immediate);

"558bec83e4f081ec38010000a1":
__thiscall Entity_Tear* Entity_Familiar::FireProjectile(const Vector& AimDirection, bool Unk);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec83ec40a1":
__thiscall Entity_Laser* Entity_Familiar::FireBrimstone(const Vector& AimDirection, bool Unk);

"558bec81ec98000000a1????????33c58945??53":
__thiscall Entity_Laser* Entity_Familiar::FireTechLaser(const Vector& AimDirection);

"8b41??83f83e":
__thiscall bool Entity_Familiar::CanBeDamagedByEnemy();

"558bec83e4f88b41??83ec10":
__thiscall bool Entity_Familiar::CanBlockProjectiles();

"558bec83e4f883ec3ca1????????33c4894424??538bd95657895c24":
__thiscall void Entity_Familiar::RemoveFromPlayer(bool UnusedRemoveFamiliar);

"8b41??3d84030000":
__thiscall bool Entity_Familiar::CanCharm();

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ece800000056":
__thiscall void Entity_Familiar::WispInit();

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ecd0000000a1????????33c58945??5657508d45??64a3????????8bf9897d":
__thiscall bool Entity_Familiar::wisp_kill();

"558bec6aff68????????64a1????????5083ec74a1????????33c58945??5657508d45??64a3????????8bf9897d??f30f7e05":
__thiscall void Entity_Familiar::delirium_morph();


struct Entity_Familiar depends (ColorMod, ItemConfig_Item) : public Entity {
{{
	inline Entity_Player** GetPlayer() { return (Entity_Player**)((char*)this + 0x360); }
	inline NPCAI_Pathfinder* GetPathFinder() {return (NPCAI_Pathfinder*)((char*)this + 0x54c); }
	inline Weapon** GetWeapon() { return (Weapon**)((char*)this + 0xcfc); }
}}
	
	Entity_Player* _player : 0x360;
	int _moveDelayNum: 0x548;
	bool _isFollower : 0xcc4;
	bool _isDelayed : 0xcc5;
	int _state : 0xcd4;
	bool _isLilDelirium : 0xd00;
	ItemConfig_Item* _item : 0xe20;
	ColorMod _dirtColor : 0xe28;
	int _wispCollectibleType : 0xe54;
	
    __vtable {
		skip; // Free

		override
		"558bec6aff68????????64a1????????5081ec28030000":
		void Init(unsigned int type, unsigned int variant, unsigned int subtype, unsigned int initSeed);
		
		skip; // PreUpdate
		
        override
        "558bec6aff68????????64a1????????5081ec58020000a1????????33c58945??56":
        void Update();
		
		skip; // Interpolate
		skip; // Render
		skip; // RenderShadowLayer
		skip; // PostRender
		skip; // TakeDamage
		skip; // Kill
		skip; // Remove
		skip; // TriggerGlowingHourglass
		skip; // GetRenderZ
		skip; // CanOverwrite
		skip; // SetColor
		skip; // SetCollisionDamage
		skip; // ClearReferences
		skip; // CanShutDoors
		skip; // IsBoss
		skip; // IsValidTarget
		skip; // TryThrow
		skip; // GetForwardVector
		skip; // HandleCollision
		skip; // ResetColor
		skip; // LoadEntityConfig
    };

 } : 0xe70;

"6a0068(????????)68????????6a0050e8????????8b8d0cffffff83c4148985fcfeffff":
reference void* EntityFamiliarRTTI;
