"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec105657a1????????33c5508d45??64a3????????8bf9897d":
__thiscall void Game::constructor();

"558bec6aff68????????64a1????????5083ec40a1????????33c58945??535657508d45??64a3????????c745??00000000":
__thiscall void Game::StartDebug(int levelStage,int stageType,int difficulty,std_string* unk); 

"558bec6aff68????????64a1????????5081eca0000000":
__thiscall void Game::StartFromRerunState(GameState* state);

/*
FuncSignature Signature_GameIsPaused = {
	"\x83\xB9\x00\x00\x00\x00\x00\x8B\x15",
	//mask
	"xx?????xx",
*/

"558bec6aff68????????64a1????????5081ecac000000":
__thiscall void Game::RestoreState(GameState* state,bool startGame);

"558bec6aff68????????64a1????????5083ec78a1????????33c58945??535657508d45??64a3????????8bf1":
__thiscall void Game::SaveState(GameState* state);

"8bc18b88????????85c979":
__thiscall GlowingHourglassState* Game::GetGlowingHourglassState();

"83b9????????008b15":
__thiscall bool Game::IsPaused();

"a1????????8b80????????83f80174??83f80374??32c0":
static bool Game::IsHardMode();

"558bec83e4f883ec6c8b45":
__thiscall Entity* Game::Spawn(unsigned int type, unsigned int variant, const Vector& position, const Vector& velocity, Entity* spawner, unsigned int subtype, unsigned int seed, unsigned int unk);

"558beca1????????538b5d":
__thiscall void Game::ShakeScreen(int timeout);

"558bec83ec088b45??56":
__thiscall void Game::MakeShockwave(const Vector& pos, float amplitude, float speed, int duration);

"558bec5156578bf98b97":
__thiscall Entity_Player* Game::GetPlayer(unsigned int Index);

"8b81????????2b81????????c1f802c3":
__thiscall int Game::GetNumPlayers();

"558bec83e4f083ec38a1":
__thiscall void Game::Update();

"568bf180be????????008d8e":
__thiscall bool Game::AchievementUnlocksDisallowed();

// Last parameter is NOT the dimension.
"558bec83ec1c53568b75??578bf9":
__thiscall bool Game::PlaceRoom(LevelGenerator_Room *room, RoomConfig_Room *data, unsigned int Seed, int unk);

"558bec83e4f8515356578bf96aff":
__thiscall void Game::UpdateVisibility();

"558bec8b45??85c079":
__thiscall int* Game::GetRoomDescriptorsOffsetsArrayForDimension(int dimension);

"558bec6aff68????????64a1????????505657a1????????33c5508d45??64a3????????8bf164a1":
__thiscall RoomDescriptor* Game::GetRoomByIdx(int32_t idx, int32_t dimension);

"ffb1????????ffb1????????e8????????c3????????????????????????????ffb1":
__thiscall RoomDescriptor* Game::GetCurrentRoomDesc();

"558bec83ec1cf30f1005":
__thiscall float Game::GetPlanetariumChance();

"558bec83ec0c568bf18b0d":
__thiscall void Game::StartStageTransition(bool SameStage,int param_2,Entity_Player *param_3);

"558bec83e4f881ec1802":
__thiscall void Game::Render();

"558bec8b0d????????8b5508":
__thiscall void Game::ToggleDebugFlag(unsigned int flag);

"558bec8b5508b801000000568bf18bca83e11fc1ea05d3e085849664":
__thiscall bool Game::GetDebugFlag(unsigned int flag);

"558bec6aff68????????64a1????????5083ec78535657a1????????33c5508d45??64a3????????f30f1155":
__thiscall Entity* Game::SpawnBombCrater(Vector* Pos, float Scale<xmm2>);

"558bec83ec3ca1????????33c58945??538b1d":
static void Game::DevolveEnemy(Entity* ent);

"558bec6aff68????????64a1????????5081ecb8000000a1????????33c58945??535657508d45??64a3????????8b45":
__thiscall void Game::NetStart(void *unk, int challenge, Seeds seed, unsigned int difficulty, GameState *state);

"558bec515356578b3d????????b9":
static void Game::ProcessInput();

"558bec6aff68????????64a1????????5081eca4000000a1":
__thiscall void Game::Start(int playertype,int challenge,Seeds seeds,unsigned int difficulty);

"558bec6aff68????????64a1????????5083ec48a1????????33c58945??535657508d45??64a3????????8b1d":
__thiscall void Game::StartDailyChallenge(DailyChallenge * daily);

"558bec51807d??000f28fb":
__thiscall void Game::SetColorModifier(ColorModState* color, bool lerp, float rate<xmm3>);

"83b9????????0076??8d81????????c3":
__thiscall ChallengeParam* Game::GetChallengeParams();

"a1????????33c98b90????????83fa038b80????????0f94c14083c109":
static bool Game::IsGreedBoss();

"a1????????33c98b90????????83fa038b80????????0f94c14083c10b":
static bool Game::IsGreedFinalBoss();

"8b81????????83f80274??83f80374??32c0c3":
__thiscall bool Game::IsGreedMode();

"558bec8b45??538b1d":
__thiscall void Game::End(int EndingID);

"558becf30f1045??8b45??f30f1181????????f30f5881": //lua binder version
__thiscall void Game::FadeOut(float Speed, int FadeoutTarget);

"558bec83e4f851a1????????566aff":
__thiscall void Game::MoveToRandomRoom(bool iAmErrorRoom, int Seed, Entity_Player* player);

"558bec83ec0853568b35????????578975":
__stdcall void Game::Exit(bool ShouldSave);

"558bec8b45??8981????????8981????????f30f1191":
__thiscall void Game::SetBloom(int Time, float Strength<xmm2>);

"a1????????568bf183b8????????2c":
__thiscall unsigned int Game::GetStageID(bool unused);

"558bec568b75??33d25733ff":
__thiscall bool Game::GetGameStateFlag(uint32_t GameStateFlag);

"558bec8b55??b801000000568bf18bca83e11fc1ea05d3e08584??????????5e0f95c05dc20400??????????????????8b81":
__thiscall bool Game::GetLevelStateFlag(uint32_t LevelStateFlag);

"568bf18b0d????????8b81????????83f80274??83f80374??8b168d42??83f80577??8b89????????33c081e1000001000bc175??8b46??83f80474??83f80574":
__thiscall bool Game::LevelHasPhotoDoor();

"e8????????c745fcffffffffa3(????????)e8":
reference Game *g_Game;

struct Game depends (Level, RoomDescriptor, RoomConfig, BossPool, PlayerManager, Console, ItemOverlay, Ambush, ProceduralItemManager, RoomTransition, GameState, GlowingHourglassState, Seeds, DebugRenderer, ScoreSheet, ColorModState, GameOver, ItemPool, Leaderboard, GenericPrompt, DailyChallenge, Vector, EntityFactory) { {{
	Game()
	{
		this->constructor();
	}
    
    uint32_t GetNbRooms() const 
    { 
        return *(uint32_t*)((char*)this + 0x1815C); 
    }
    
	inline Console* GetConsole() { return (Console*)((char*)this + 0x1BB60); } // Cast to appropriate type
	
	inline ItemOverlay* GetItemOverlay() { return (ItemOverlay*)((char*)this + 0x1BCC0) ; }
	
	inline Ambush* GetAmbush() { return (Ambush*)((char*)this + 0x1c31b8); }
	
	inline Room* GetCurrentRoom() { return this->_room; }
		
	inline int GetCurrentRoomIdx() {return *(int*)((char*)this + 0x18194); }

    inline int GetDimension() {return *(int*)((char*)this + 0x1819C);}
	
	inline int GetLastBossRoomListIdx() {return *(int*)((char*)this + 0x181A4); }
	
	inline int GetGreedModeWave() { return *(int*)((char*)this + 0x181C4); }
	
	inline const unsigned int* GetLevelStateFlags() { return (const unsigned int*)((char*)this + 0x1822C); }
	
	inline RoomConfig* GetRoomConfig() { return (RoomConfig*)((char*)this + 0x1879C); }
	
	inline PlayerManager* GetPlayerManager() { return (PlayerManager*)((char*)this + 0x1BA40); }
	
	inline int GetLastDevilRoomStage() { return *(int*)((char*)this + 0x1C3174); }
	
	inline int GetLastLevelWithDamage() { return *(int*)((char*)this + 0x243628); }
	
	inline int GetLastLevelWithoutHalfHp() { return *(int*)((char*)this + 0x24361c); }

	inline int GetTreasureRoomsVisited() { return *(int*)((char*)this + 0x1C3178); }
	
	inline int GetPlanetariumsVisited() { return *(int*)((char*)this + 0x1C317C); }
	
	inline int IsPauseMenuOpen() { return (bool)*(int*)((char*)this + 0x10203C); } //in reality this gets the pause menu itself, but the first att is if its opened or not
	
	inline PauseScreen* GetPauseMenu() { return (PauseScreen*)((char*)this + 0x10203C); } 
	
	inline DailyChallenge GetDailyChallenge() { return *(DailyChallenge*)((char*)this + 0x1C3204); }
	
	inline unsigned int GetChallenge() { return *(unsigned int*)((char*)this + 0x1C319C); }
	
	inline bool* IsDebug() { return &this->_isDebug; }
	
	inline unsigned int* GetDebugFlags() { return (unsigned int*)((char*)this + 0X1C3164); }
	
	inline ScoreSheet* GetScoreSheet() { return (ScoreSheet*)((char*)this + 0x1c32b8); }
	
	inline int GetDifficulty() {return *(int*)((char*) this + 0x243624); }
	
	inline ProceduralItemManager* GetProceduralItemManager() {return (ProceduralItemManager*)((char*) this + 0x283c20); }
    
	inline HUD* GetHUD() { return (HUD*)((char*)this + 0x3DA4C); }

	inline PlayerHUD* GetPlayerHUD(uint32_t playerId) { return (PlayerHUD*)((char*)this + 0x3DA4C + playerId * 0x6B0); }
	
	inline Minimap* GetMinimap() { return (Minimap*)((char*)this + 0x1a2ab0); }
	
	inline RoomTransition* GetRoomTransition() { return (RoomTransition*)((char*)this + 0x1b6c0); }

    inline StageTransition* GetStageTransition() { return (StageTransition*)((char*)this + 0x1ba0c); }
	
	inline DebugRenderer* GetDebugRenderer() { return (DebugRenderer*)((char*)this + 0x283bf8); }
	
	inline GenericPrompt* GetGenericPrompt() { return (GenericPrompt*)((char*)this + 0x1c33fc); }

	inline GameOver* GetGameOver() { return (GameOver*)((char*)this + 0x1d154); }
	
	
	// Wack
	inline ColorModState* GetCurrentColorModifier() { return (ColorModState*)((char*)this + 0x283b84); }
	inline ColorModState* GetTargetColorModifier() { return (ColorModState*)((char*)this + 0x283b9c); }
	inline ColorModState* GetLerpColorModifier() { return (ColorModState*)((char*)this + 0x283bb4); }

    bool LIBZHL_API IsErased(int type, int variant, int subtype);
}} 
	//Level _level : 0x0;
	uint32_t _stage : 0x0;
	uint32_t _stageType : 0x4;
	bool _bossChallenge : 0x8;
	bool _devilRoomDisabled : 0x9;
	uint32_t _curses : 0xC;
	RoomDescriptor _gridRooms[507] : 0x14;
	RoomDescriptor _negativeGridRooms[18] : 0x16c7c;
	uint32_t _roomOffset[507] : 0x1796c;
	uint32_t _nbRooms : 0x1815c;
	uint32_t _startingRoomIdx : 0x18160;
	Room* _room : 0x18190;
	uint32_t _currentRoomIdx : 0x18194;
	uint32_t _lastRoomIdx : 0x18198;
	uint32_t _currentDimensionIdx : 0x1819c;
	uint32_t _lastRoomDimensionIdx : 0x181a0;
	uint32_t _lastBossRoomListIdx : 0x181a4;
	uint32_t _leaveDoor : 0x181a8;
	uint32_t _enterDoor : 0x181ac;
	uint32_t _dungeonPlacementSeed : 0x181bc;
	uint32_t _greedModeWave : 0x181c4;
	unsigned int _stateFlags : 0x1822c;
	vector_EntitySaveState _myosotisPickups : 0x18234;
	uint32_t _greedModeTreasureRoomIdx : 0x18200;
	RoomConfig _roomConfig : 0x1879c;
	ItemPool _itemPool : 0x1A5CC;
	BossPool _bossPool: 0x1ADF4;
	PlayerManager _playerManager : 0x1BA40;
	Seeds _seedEffects : 0x1bb04;
	Console _console : 0x1bb60;
	ItemOverlay _itemOverlay : 0x1bcc0;
	Leaderboard _leaderboard : 0x3d5f0;
	int _frameCount : 0x1a30dc; // 0x1a30dc
	Vector _screenShakeOffset : 0x1a30f0;
	int _treasureRoomsVisited : 0x1c3178;
	int _planetariumsVisited : 0x1c317c;
	bool _isRerun : 0x1c31a0;
	bool _isDebug : 0x1c31a1;
	Ambush _ambush : 0x1c31b8;
	unsigned int _challenge : 0x1c319c;
	DailyChallenge _dailyChallenge: 0x1c3204;
	int _shopVisits : 0x1c3194;
	EntityFactory* _entityFactory : 0x1c3198;
	ScoreSheet _scoreSheet : 0x1c32b8;
	uint32_t _difficulty : 0x243624;
	bool _isStoringGlowingHourglassState : 0x243646;
	bool _isRestoringGlowingHourglassState : 0x243647;
	GlowingHourglassState _glowingHourglassStates[2] : 0x243648;
	int _currentGlowingHourglassSlot : 0x283b78;
	bool _shouldLerpColorModState : 0x283b80;
	ProceduralItemManager _proceduralItemManager : 0x283c20;
	vector_ErasedEntities _erasedEntities : 0x283c14; 
	bool  _triggerWindowResize : 0x1c3154;
	unsigned int _gameStateFlags : 0x1c316c;
	int _donationModGreed : 0x1c318c;
	int _donationModAngel : 0x1c3190;
	float _lightningIntensity : 0x283c00;
	float _dizzyIntensity : 0x283c04;
	float _dizzyTargetIntensity : 0x283c08;
	float _dizzyIntensityChangeSpeed : 0x283c0c;
} : 0x285238;
