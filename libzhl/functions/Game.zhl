"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec105657a1????????33c5508d45??64a3????????8bf9897d??897d":
__thiscall void Game::constructor();

"558bec6aff68????????64a1????????5083ec40a1????????33c58945??535657508d45??64a3????????c745??00000000":
__thiscall void Game::StartDebug(int levelStage,int stageType,int difficulty,std_string* unk); 

"558bec6aff68????????64a1????????5081eca0000000a1????????33c58945??535657508d45??64a3????????8b1d":
__thiscall void Game::StartFromRerunState(GameState* state);

"558bec6aff68????????64a1????????5081ecac000000a1????????33c58945??535657508d45??64a3????????8bf9":
__thiscall void Game::RestoreState(GameState* state,bool startGame);

"558bec6aff68????????64a1????????5083ec78a1????????33c58945??535657508d45??64a3????????8bf1":
__thiscall void Game::SaveState(GameState* state);

"8bc18b88????????85c979":
__thiscall GlowingHourglassState* Game::GetGlowingHourglassState();

"8bd1568b35":
__thiscall bool Game::IsPaused();

"a1????????8b80????????83f80174??83f80374??32c0":
static bool Game::IsHardMode();

"558bec83e4f883ec448b45??53":
__thiscall Entity* Game::Spawn(unsigned int type, unsigned int variant, const Vector& position, const Vector& velocity, Entity* spawner, unsigned int subtype, unsigned int seed, unsigned int unk);

"558beca1????????8b55??53":
__thiscall void Game::ShakeScreen(int timeout);

"558bec83ec088b45??56":
__thiscall void Game::MakeShockwave(const Vector& pos, float amplitude, float speed, int duration);

"558bec5156578bf98b97":
__thiscall Entity_Player* Game::GetPlayer(unsigned int Index);

"8b81????????2b81????????c1f802c3":
__thiscall int Game::GetNumPlayers();

"558bec6aff68????????64a1????????5083ec405657a1????????33c5508d45??64a3????????8bf9":
__thiscall void Game::Update();

"568bf180be????????008d8e":
__thiscall bool Game::AchievementUnlocksDisallowed();

// Last parameter is NOT the dimension.
"558bec83ec1c53568b75??578bf9":
__thiscall bool Game::PlaceRoom(LevelGenerator_Room *room, RoomConfig_Room *data, unsigned int Seed, int unk);

"558bec83e4f8515356578bf96aff":
__thiscall void Game::UpdateVisibility();

"558bec8b45??85c079":
__thiscall int* Game::GetRoomDescriptorsOffsetsArrayForDimension(int dimension);

"558bec6aff68????????64a1????????505657a1????????33c5508d45??64a3????????8bf164a1":
__thiscall RoomDescriptor* Game::GetRoomByIdx(int32_t idx, int32_t dimension);

"ffb1????????ffb1????????e8????????c3????????????????????????????ffb1":
__thiscall RoomDescriptor* Game::GetCurrentRoomDesc();

"558bec83ec1cf30f1005":
__thiscall float Game::GetPlanetariumChance();

"558bec83e4f883ec1c538b5d??56578bf983fb06":
__thiscall void Game::StartStageTransition(bool SameStage,int param_2,Entity_Player *param_3);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ec20020000":
__thiscall void Game::Render();

"558bec8b0d????????8b55??81c1745b0200":
__thiscall void Game::ToggleDebugFlag(unsigned int flag);

"558bec8b55??b801000000568bf18bca83e11fc1ea05d3e08584":
__thiscall bool Game::GetDebugFlag(unsigned int flag);

"558bec6aff68????????64a1????????5081ec80000000535657a1????????33c5508d45??64a3????????f30f1155":
__thiscall Entity* Game::SpawnBombCrater(Vector* Pos, float Scale<xmm2>);

"558bec83ec4ca1????????33c58945??8b45":
static void Game::DevolveEnemy(Entity* ent, int* unk);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ece0000000a1????????33c58945??5657508d45??64a3????????8b43":
__thiscall void Game::NetStart(void *unk, int challenge, Seeds seed, unsigned int difficulty, GameState *state);

"558bec83ec3c5356578b3d":
static void Game::ProcessInput();

"558bec6aff68????????64a1????????5081eca4000000a1????????33c58945??535657508d45??64a3????????c745??00000000":
__thiscall void Game::Start(int playertype,int challenge,Seeds seeds,unsigned int difficulty);

"558bec6aff68????????64a1????????5083ec48a1????????33c58945??535657508d45??64a3????????8b1d":
__thiscall void Game::StartDailyChallenge(DailyChallenge * daily);

"558bec6aff68????????64a1????????5083ec54a1????????33c58945??535657508d45??64a3????????8bf9":
__thiscall void Game::NextVictoryLap();

"558bec51807d??000f28fb":
__thiscall void Game::SetColorModifier(ColorModState* color, bool lerp, float rate<xmm3>);

"83b9????????0076??8d81????????c3":
__thiscall ChallengeParam* Game::GetChallengeParams();

"a1????????33c98b90????????83fa038b80????????0f94c14083c109":
static bool Game::IsGreedBoss();

"a1????????33c98b90????????83fa038b80????????0f94c14083c10b":
static bool Game::IsGreedFinalBoss();

"8b81????????83f80274??83f80374??32c0c3":
__thiscall bool Game::IsGreedMode();

"558bec83e4f883ec0c538b5d??8bd1":
__thiscall void Game::End(int EndingID);

"558bec8b55??83ec14": //lua binder version
__thiscall void Game::FadeOut(float Speed, int FadeoutTarget, KColor* color);

"558bec83e4f851a1????????566aff":
__thiscall void Game::MoveToRandomRoom(bool iAmErrorRoom, int Seed, Entity_Player* player);

"558bec83ec08538b1d????????5657895d":
__stdcall void Game::Exit(bool ShouldSave);

"558bec8b45??8981????????8981????????f30f1191":
__thiscall void Game::SetBloom(int Time, float Strength<xmm2>);

"a1????????568bf183b8????????2c":
__thiscall unsigned int Game::GetStageID(bool unused);

"558bec568b75??33d25733ff":
__thiscall bool Game::GetGameStateFlag(uint32_t GameStateFlag);

"558bec8b45??ba17000000":
__thiscall bool Game::GetLevelStateFlag(uint32_t LevelStateFlag);

"568bf18b0d????????8b81????????83f80274??83f80374??8b168d42??83f80577??8b89????????33c081e1000001000bc175??8b46??83f80474??83f80574":
__thiscall bool Game::LevelHasPhotoDoor();

"a1(????????)c3????????????????????558bec6a00":
reference Game *g_Game;

struct Game depends (Level, RoomDescriptor, RoomConfig, BossPool, PlayerManager, Console, ItemOverlay, Ambush, ProceduralItemManager, RoomTransition, GameState, GlowingHourglassState, Seeds, DebugRenderer, ScoreSheet, ColorModState, GameOver, ItemPool, Leaderboard, GenericPrompt, DailyChallenge, Vector, EntityFactory, StageTransition, Minimap, ColorMod, HUD, PauseScreen) { {{
	Game()
	{
		this->constructor();
	}
    
    uint32_t GetNbRooms() const 
    { 
        return this->_nbRooms; 
    }
    
	inline Console* GetConsole() { return &this->_console; }
	
	inline ItemOverlay* GetItemOverlay() { return &this->_itemOverlay; }
	
	inline Ambush* GetAmbush() { return &this->_ambush; }
	
	inline Room* GetCurrentRoom() { return this->_room; }
		
	inline int GetCurrentRoomIdx() {return this->_currentRoomIdx; }

    inline int GetDimension() {return this->_currentDimensionIdx;}
	
	inline int GetLastBossRoomListIdx() {return this->_lastBossRoomListIdx; }
	
	inline int GetGreedModeWave() { return this->_greedModeWave; }
	
	inline const unsigned int* GetLevelStateFlags() { return &this->_levelStateFlags; }
	
	inline RoomConfig* GetRoomConfig() { return &this->_roomConfig; }
	
	inline PlayerManager* GetPlayerManager() { return &this->_playerManager; }
	
	inline int GetLastDevilRoomStage() { return this->_lastDevilRoomStage; }
	
	inline int GetLastLevelWithDamage() { return this->_lastLevelWithDamage; }
	
	inline int GetLastLevelWithoutHalfHp() { return this->_lastLevelWithoutHalfHp; }

	inline int GetTreasureRoomsVisited() { return this->_treasureRoomsVisited; }
	
	inline int GetPlanetariumsVisited() { return this->_planetariumsVisited; }
	
	inline bool IsPauseMenuOpen() { return this->_pauseScreen.state > 0; }
	
	inline PauseScreen* GetPauseMenu() { return &this->_pauseScreen; }
	
	inline DailyChallenge GetDailyChallenge() { return this->_dailyChallenge; }
	
	inline unsigned int GetChallenge() { return this->_challenge; }
	
	inline bool* IsDebug() { return &this->_isDebug; }
	
	inline unsigned int* GetDebugFlags() { return &this->_debugFlags; }
	
	inline ScoreSheet* GetScoreSheet() { return &this->_scoreSheet; }
	
	inline int GetDifficulty() {return this->_difficulty; }

	inline int GetMode() { return this->IsGreedMode() ? 1 : 0; }
	
	inline ProceduralItemManager* GetProceduralItemManager() {return &this->_proceduralItemManager; }
    
	inline HUD* GetHUD() { return &this->_hud; }

	inline PlayerHUD* GetPlayerHUD(int playerId) { return this->_hud.GetPlayerHUD(playerId); }
	
	inline Minimap* GetMinimap() { return &this->_minimap; }
	
	inline RoomTransition* GetRoomTransition() { return &this->_roomTransition; }

    inline StageTransition* GetStageTransition() { return &this->_stageTransition; }
	
	inline DebugRenderer* GetDebugRenderer() { return &this->_debugRenderer; }
	
	inline GenericPrompt* GetGenericPrompt() { return &this->_genericPrompt; }

	inline GameOver* GetGameOver() { return &this->_gameOver; }

	inline ColorModState* GetCurrentColorModifier() { return &this->_currentColorModifier; }
	inline ColorModState* GetTargetColorModifier() { return &this->_targetColorModifier; }
	inline ColorModState* GetLerpColorModifier() { return &this->_lerpColorModifier; }

    bool LIBZHL_API IsErased(int type, int variant, int subtype);
}} 
	//Level _level : 0x0;
	uint32_t _stage : 0x0;
	uint32_t _stageType : 0x4;
	bool _bossChallenge : 0x8;
	bool _devilRoomDisabled : 0x9;
	uint32_t _curses : 0xC;
	RoomDescriptor _gridRooms[507] : 0x14;
	RoomDescriptor _negativeGridRooms[20] : 0x16c7c;
	uint32_t _roomOffset[507] : 0x17adc;
	uint32_t _nbRooms : 0x182cc;
	uint32_t _startingRoomIdx : 0x182d0;
	Room* _room : 0x18300;
	uint32_t _currentRoomIdx : 0x18304;
	uint32_t _lastRoomIdx : 0x18308;
	uint32_t _currentDimensionIdx : 0x1830c;
	uint32_t _lastRoomDimensionIdx : 0x18310;
	uint32_t _lastBossRoomListIdx : 0x18314;
	uint32_t _leaveDoor : 0x18318;
	uint32_t _enterDoor : 0x1831c;
	uint32_t _dungeonPlacementSeed : 0x1832c;
	uint32_t _greedModeWave : 0x18334;
	unsigned int _levelStateFlags : 0x1839c;
	vector_EntitySaveState _myosotisPickups : 0x183a4;
	uint32_t _greedModeTreasureRoomIdx : 0x18370;
	RoomConfig _roomConfig : 0x18910;
	ItemPool _itemPool : 0x1a740;
	BossPool _bossPool: 0x1af70;
	RoomTransition _roomTransition : 0x1b83c;
	StageTransition _stageTransition : 0x1ba78;
	PlayerManager _playerManager : 0x1baa8;
	Seeds _seedEffects : 0x1bb84;
	ItemOverlay _itemOverlay : 0x1c034;
	GameOver _gameOver : 0x1d4c8;
	Leaderboard _leaderboard : 0x1d5f8;
	HUD _hud : 0x1da64;
	PauseScreen _pauseScreen : 0x236f4;
	Minimap _minimap : 0x254fc;
	int _frameCount : 0x25b28;
	Vector _screenShakeOffset : 0x25b3c;
	bool  _triggerWindowResize : 0x25b64;
	unsigned int _debugFlags : 0x25b74;
	uint64_t _gameStateFlags : 0x25b78;
	int _lastDevilRoomStage : 0x25b84;
	int _treasureRoomsVisited : 0x25b88;
	int _planetariumsVisited : 0x25b8c;
	int _donationModGreed : 0x25b9c;
	int _donationModAngel : 0x25ba0;
	int _shopVisits : 0x25ba4;
	EntityFactory* _entityFactory : 0x25bb0;
	unsigned int _challenge : 0x25bb4;
	bool _isRerun : 0x25bb8;
	bool _isDebug : 0x25bb9;
	Ambush _ambush : 0x25bf8;
	DailyChallenge _dailyChallenge: 0x25c60;
	ScoreSheet _scoreSheet : 0x25d14;
	GenericPrompt _genericPrompt : 0x25e60;
	int _lastLevelWithoutHalfHp : 0x260a8;
	uint32_t _difficulty : 0x260b0;
	int _lastLevelWithDamage : 0x260b4;
	bool _isStoringGlowingHourglassState : 0x260d2;
	bool _isRestoringGlowingHourglassState : 0x260d3;
	GlowingHourglassState _glowingHourglassStates[2] : 0x260d4;
	int _currentGlowingHourglassSlot : 0x66c0c;
	bool _shouldLerpColorModState : 0x66c14;
	ColorModState _currentColorModifier : 0x66c18;
	ColorModState _targetColorModifier : 0x66c30;
	ColorModState _lerpColorModifier : 0x66c48;
	DebugRenderer _debugRenderer : 0x66c8c;
	float _lightningIntensity : 0x66c94;
	float _dizzyIntensity : 0x66c98;
	float _dizzyTargetIntensity : 0x66c9c;
	float _dizzyIntensityChangeSpeed : 0x66ca0;
	vector_ErasedEntities _erasedEntities : 0x66ca8; 
	ProceduralItemManager _proceduralItemManager : 0x66cb4;
	Console _console : 0x682cc;
} : 0x683e0;
