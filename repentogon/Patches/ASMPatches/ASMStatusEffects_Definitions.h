#pragma once

struct StatusEffectPatchInfo {
	char* signature;
	char* comment;
	int sigOffset;
	ASMPatch::Registers entityReg; // pointer containing entity at the time of jmp
	ASMPatch::Registers targetReg; // register where entity pointer is expected to be after the patch
	ASMPatch::SavedRegisters::Registers saveReg; // its corresponding SavedRegisters::Register
	unsigned int jumpOffset;
	std::optional<bool> preserveXMM1; // for AddPoison
};

// These all overwrite the call to DoesEntityShareStatus, calls the non-inlined function,
// puts the resulting Entity back into targetRegister, and jumps back to immediately after the inlined function
// (this is usually test edx, edx with edx holding the calculated duration)
const StatusEffectPatchInfo patches[16] = {
	{"e8????????84c074??8b8f????????85c974??6690",
	"AddBaited", 0, ASMPatch::Registers::EDI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x21},

	{"e8????????84c074??8b8f????????85c974??8bf18b8e????????85c975??85d20f84????????8b86????????83e00183c8000f85????????3986????????0f8f????????8b8e????????85d27e??8d04??b978000000",
	"AddBleeding", 0, ASMPatch::Registers::EDI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},

	{"e8????????84c074??8b8e????????85c974??660f1f84??00000000",
	"AddBrimstoneMark", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x28},

	{"e8????????84c074??8b86????????85c074??0f1f44??00",
	"AddBurn", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x24},

	{"e8????????84c074??8b8f????????85c974??0f1f4000",
	"AddCharmed", 0, ASMPatch::Registers::EDI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x23},

	{"e8????????84c074??8b8e????????85c974??8bf18b8e????????85c975??8b8e",
	"AddConfusion", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},

	{"e8????????84c074??8b8e????????85c974??8bf18b8e????????85c975??85ff",
	"AddFear", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},

	{"e8????????84c074??8b8e????????85c974??0f1f40008bf18b8e????????85c975??85d2",
	"AddFreeze", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x23},

	{"e8????????84c074??8b8e????????85c974??0f1f84??00000000",
	"AddIce", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x27},

	{"e8????????84c074??8b86????????85c074??90",
	"AddKnockback", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x20},

	{"e8????????84c074??8b8f????????85c974??8bf18b8e????????85c975??85d20f84????????8b86????????83e00183c8000f85????????3986????????0f8f????????8b8e????????85d27e??8d04??b92c010000",
	"AddMagnetized", 0, ASMPatch::Registers::EDI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},

	{"e8????????84c074??8b8e????????85c974??0f1f40008bf18b8e????????85c975??85ff",
	"AddMidasFreeze", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x23},

	{"e8????????84c074??8b86????????85c074??0f1f80000000008bf0",
	"AddPoison", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x26, true},

	{"e8????????84c074??8b8f????????85c974??8bf18b8e????????85c975??8b8e",
	"AddShrink", 0, ASMPatch::Registers::EDI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},

	{"e8????????84c074??8b8e????????85c974??90",
	"AddSlowing", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x20},

	{"e8????????84c074??8b8e????????85c974??8bf18b8e????????85c975??85d2",
	"AddWeakness", 0, ASMPatch::Registers::ESI, ASMPatch::Registers::ESI, ASMPatch::SavedRegisters::Registers::ESI, 0x1F},
};